From 1e239cc0f3608dfe5d8dc046727e28f7c1fab4e8 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sat, 29 Oct 2022 03:37:12 +0700
Subject: [PATCH 5/5] Add experimental standalone mode

---
 src/drivers/ndis_events.c                 |   2 +
 wpa_supplicant/main_winsvc.c              |  11 +-
 wpa_supplicant/wpa_gui-qt4/standalone.cpp | 415 ++++++++++++++++++++++
 wpa_supplicant/wpa_gui-qt4/standalone.h   |  60 ++++
 wpa_supplicant/wpa_gui-qt4/wpagui.cpp     |  25 ++
 5 files changed, 512 insertions(+), 1 deletion(-)
 create mode 100644 wpa_supplicant/wpa_gui-qt4/standalone.cpp
 create mode 100644 wpa_supplicant/wpa_gui-qt4/standalone.h

diff --git a/src/drivers/ndis_events.c b/src/drivers/ndis_events.c
index 93673a3..b8cc905 100644
--- a/src/drivers/ndis_events.c
+++ b/src/drivers/ndis_events.c
@@ -719,12 +719,14 @@ ndis_events_init(HANDLE *read_pipe, HANDLE *event_avail,
 
 	if (wmi_refcnt++ == 0) {
 		hr = CoInitializeEx(0, COINIT_MULTITHREADED);
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
 		if (FAILED(hr)) {
 			wpa_printf(MSG_ERROR, "CoInitializeEx() failed - "
 				   "returned 0x%x", (int) hr);
 			os_free(events);
 			return NULL;
 		}
+#endif
 	}
 
 	if (wmi_first) {
diff --git a/wpa_supplicant/main_winsvc.c b/wpa_supplicant/main_winsvc.c
index 8211097..816d67b 100644
--- a/wpa_supplicant/main_winsvc.c
+++ b/wpa_supplicant/main_winsvc.c
@@ -215,8 +215,15 @@ static void prepare_registry(void)
 	RegCloseKey(hk);
 }
 
+#ifdef CONFIG_CTRL_IFACE_STANDALONE
+int wpa_supplicant_run_call(struct wpa_global *global);
+#define wpa_supplicant_run wpa_supplicant_run_call
+#endif
 
-static int wpa_supplicant_thread(void)
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
+static
+#endif
+int wpa_supplicant_thread(void)
 {
 	int exitcode;
 	struct wpa_params params;
@@ -499,6 +506,7 @@ static void WINAPI service_start(DWORD argc, LPTSTR *argv)
 }
 
 
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
 int main(int argc, char *argv[])
 {
 	SERVICE_TABLE_ENTRY dt[] = {
@@ -544,3 +552,4 @@ int main(int argc, char *argv[])
 
 	return 0;
 }
+#endif
diff --git a/wpa_supplicant/wpa_gui-qt4/standalone.cpp b/wpa_supplicant/wpa_gui-qt4/standalone.cpp
new file mode 100644
index 0000000..10e64f0
--- /dev/null
+++ b/wpa_supplicant/wpa_gui-qt4/standalone.cpp
@@ -0,0 +1,415 @@
+#include "standalone.h"
+
+#include <QDebug>
+#include <QByteArray>
+#include <QApplication>
+#include <QPointer>
+
+#include "includes.h"
+#include "common/wpa_ctrl.h"
+extern "C" {
+#include "ctrl_iface.h"
+#include "eloop.h"
+#include "wpa_supplicant_i.h"
+// main_winsvc.c
+int wpa_supplicant_thread(void);
+int wpa_supplicant_run_call(struct wpa_global *global);
+}
+
+namespace {
+
+class ScopedLogger
+{
+public:
+	ScopedLogger(const char *scope, const QByteArray &arg = QByteArray())
+		: m_scope(scope)
+		, m_arg(arg)
+	{
+		if (const char *c = strrchr(scope, ':'))
+			m_scope = c + 1;
+		if (m_arg.isEmpty())
+			qDebug() << "=>" << m_scope;
+		else
+			qDebug() << "=>" << m_scope << m_arg;
+	}
+
+	~ScopedLogger()
+	{
+		if (m_arg.isEmpty())
+			qDebug() << "<=" << m_scope;
+		else
+			qDebug() << "<=" << m_scope << m_arg;
+	}
+
+	void trace(const QByteArray &desc) const
+	{
+		if (m_arg.isEmpty())
+			qDebug() << "<...>" << m_scope << ":" << desc;
+		else
+			qDebug() << "<...>" << m_scope << m_arg << ":" << desc;
+	}
+
+private:
+	const char *m_scope;
+	const QByteArray m_arg;
+};
+
+}
+
+#if 1//ndef CONFIG_NO_STDOUT_DEBUG
+#define SCOPE_LOG(S) const ScopedLogger scoped_logger((S))
+#define SCOPE_LOG_ARG(S, A) const ScopedLogger scoped_logger((S), (A))
+#define SCOPE_LOG_TRACE(D) scoped_logger.trace((D))
+#else
+#define SCOPE_LOG(S)
+#define SCOPE_LOG_ARG(S, A)
+#define SCOPE_LOG_TRACE(D)
+#endif
+
+struct ctrl_iface_priv
+{
+	wpa_supplicant *wpa_s;
+};
+
+struct ctrl_iface_global_priv
+{
+	wpa_global *global;
+};
+
+struct wpa_ctrl
+{
+	QByteArray ctrl_path;
+};
+
+StandaloneSupplicant::StandaloneSupplicant(QObject *parent)
+	: QThread(parent)
+	, m_global(NULL)
+	, m_supplicant_running(false)
+{}
+
+StandaloneSupplicant::~StandaloneSupplicant()
+{
+	if (isRunning())
+		stop();
+}
+
+wpa_supplicant *StandaloneSupplicant::get_supplicant(const wpa_ctrl *ctrl)
+{
+	wpa_supplicant *wpa_s = NULL;
+	ctrl_iface_priv *iface = NULL;
+	m_ctrl_ifaces_lock.lockForRead();
+	for (QList<ctrl_iface_priv*>::Iterator it = m_ctrl_ifaces.begin(); it != m_ctrl_ifaces.end(); ++it) {
+		if (ctrl->ctrl_path == (*it)->wpa_s->ifname) {
+			iface = *it;
+			break;
+		}
+	}
+	if (iface)
+		wpa_s = iface->wpa_s;
+	m_ctrl_ifaces_lock.unlock();
+	return wpa_s;
+}
+
+StandaloneSupplicant *StandaloneSupplicant::instance()
+{
+	static QPointer<StandaloneSupplicant> s;
+	if (!s) {
+		s = new StandaloneSupplicant(qApp);
+		if (s->thread() != qApp->thread())
+			s->moveToThread(qApp->thread());
+		s->setObjectName("StandaloneSupplicant");
+	}
+	return s;
+}
+
+int StandaloneSupplicant::wpa_supplicant_run_call(wpa_global *global)
+{
+	m_supplicant_running = true;
+	int result = wpa_supplicant_run(global);
+	m_supplicant_running = false;
+	return result;
+}
+
+void StandaloneSupplicant::wpa_supplicant_ctrl_iface_init(ctrl_iface_priv *priv)
+{
+	SCOPE_LOG(__FUNCTION__);
+	m_ctrl_ifaces_lock.lockForWrite();
+	m_ctrl_ifaces.append(priv);
+	m_ctrl_ifaces_lock.unlock();
+}
+
+void StandaloneSupplicant::wpa_supplicant_ctrl_iface_deinit(ctrl_iface_priv *priv)
+{
+	SCOPE_LOG(__FUNCTION__);
+	m_ctrl_ifaces_lock.lockForWrite();
+	m_ctrl_ifaces.removeOne(priv);
+	m_ctrl_ifaces_lock.unlock();
+}
+
+void StandaloneSupplicant::wpa_supplicant_ctrl_iface_wait(ctrl_iface_priv *priv)
+{
+	SCOPE_LOG(__FUNCTION__);
+}
+
+void StandaloneSupplicant::wpa_supplicant_global_ctrl_iface_init(ctrl_iface_global_priv *priv)
+{
+	SCOPE_LOG(__FUNCTION__);
+	m_global_lock.lockForWrite();
+	Q_ASSERT(!m_global);
+	m_global = priv;
+	m_global_lock.unlock();
+}
+
+void StandaloneSupplicant::wpa_supplicant_global_ctrl_iface_deinit(ctrl_iface_global_priv *priv)
+{
+	SCOPE_LOG(__FUNCTION__);
+	m_global_lock.lockForWrite();
+	Q_ASSERT(m_global == priv);
+	m_global = NULL;
+	m_global_lock.unlock();
+}
+
+void StandaloneSupplicant::wpa_ctrl_open(wpa_ctrl *ctrl)
+{
+	SCOPE_LOG_ARG(__FUNCTION__, QByteArray(ctrl->ctrl_path));
+}
+
+void StandaloneSupplicant::wpa_ctrl_close(wpa_ctrl *ctrl)
+{
+	SCOPE_LOG_ARG(__FUNCTION__, QByteArray(ctrl->ctrl_path));
+}
+
+int StandaloneSupplicant::wpa_ctrl_request(wpa_ctrl *ctrl, const char *cmd, size_t cmd_len, char *reply, size_t *reply_len)
+{
+	SCOPE_LOG_ARG(__FUNCTION__, QByteArray(ctrl->ctrl_path));
+
+	QByteArray buf(cmd, cmd_len);
+	if (buf.length() >= CTRL_IFACE_MAX_LEN)
+		buf.resize(CTRL_IFACE_MAX_LEN - 1);
+	buf.append('\0');
+	qDebug() << ">" << buf.constData();
+
+	while(true) {
+		int result = 0;
+		char *r = NULL;
+		size_t rlen = 0;
+		if (ctrl->ctrl_path.isEmpty()) {
+			m_global_lock.lockForRead();
+			if ((!m_global || !m_supplicant_running) && isRunning()) {
+				m_global_lock.unlock();
+				SCOPE_LOG_TRACE("waiting for global");
+				qApp->processEvents();
+				msleep(100);
+				continue;
+			}
+			wpa_global *global = (m_global ? m_global->global : NULL);
+			m_global_lock.unlock();
+			if (!global) {
+				result = -1;
+				rlen = 1;
+			} else {
+				r = wpa_supplicant_global_ctrl_iface_process(global, buf.data(), &rlen);
+			}
+		} else {
+			wpa_supplicant *wpa_s = get_supplicant(ctrl);
+			if (!wpa_s) {
+				result = -1;
+				rlen = 1;
+			} else {
+				r = wpa_supplicant_ctrl_iface_process(wpa_s, buf.data(), &rlen);
+			}
+		}
+		if (r) {
+			memset(reply, 0, *reply_len);
+			if (rlen == 0) {
+				const char *n = (const char*)memchr(r, '\n', qMin<size_t>(16, (*reply_len) - 1));
+				if (n) {
+					*reply_len = n - r + 1;
+					memcpy(reply, r, *reply_len);
+					reply[*reply_len] = '\0';
+					*reply_len = 0;
+				} else {
+					*reply_len = 0;
+					reply[0] = '\0';
+				}
+			} else {
+				*reply_len = qMin(rlen, *reply_len);
+				memcpy(reply, r, *reply_len);
+				reply[*reply_len] = '\0';
+			}
+			free(r);
+		} else {
+			switch (rlen) {
+			case 1:
+				*reply_len = 5;
+				memcpy(reply, "FAIL\n", *reply_len + 1);
+				break;
+			case 2:
+				*reply_len = 3;
+				memcpy(reply, "OK\n", *reply_len + 1);
+				break;
+			default:
+				*reply = '\0';
+				*reply_len = 0;
+				break;
+			}
+		}
+		qDebug() << "<" << reply;
+		return result;
+	}
+}
+
+int StandaloneSupplicant::wpa_ctrl_attach(wpa_ctrl *ctrl)
+{
+	SCOPE_LOG_ARG(__FUNCTION__, QByteArray(ctrl->ctrl_path));
+	wpa_supplicant *wpa_s = get_supplicant(ctrl);
+	if (wpa_s)
+		eapol_sm_notify_ctrl_attached(wpa_s->eapol);
+	return 0;
+}
+
+int StandaloneSupplicant::wpa_ctrl_detach(wpa_ctrl *ctrl)
+{
+	SCOPE_LOG_ARG(__FUNCTION__, QByteArray(ctrl->ctrl_path));
+	return 0;
+}
+
+void StandaloneSupplicant::stop()
+{
+	SCOPE_LOG(__FUNCTION__);
+	eloop_terminate();
+	wait(4000);
+}
+
+void StandaloneSupplicant::run()
+{
+	SCOPE_LOG("SUPPLICANT THREAD");
+	reset();
+	wpa_supplicant_thread();
+}
+
+void StandaloneSupplicant::reset()
+{
+	SCOPE_LOG(__FUNCTION__);
+	m_global_lock.lockForWrite();
+	m_ctrl_ifaces_lock.lockForWrite();
+	m_global = NULL;
+	m_ctrl_ifaces.clear();
+	m_global_lock.unlock();
+	m_ctrl_ifaces_lock.unlock();
+}
+
+extern "C" {
+
+struct ctrl_iface_priv *
+wpa_supplicant_ctrl_iface_init(struct wpa_supplicant *wpa_s)
+{
+	ctrl_iface_priv *priv = new ctrl_iface_priv;
+	priv->wpa_s = wpa_s;
+	StandaloneSupplicant::instance()->wpa_supplicant_ctrl_iface_init(priv);
+	return priv;
+}
+
+void
+wpa_supplicant_ctrl_iface_deinit(struct wpa_supplicant *wpa_s,
+				 struct ctrl_iface_priv *priv)
+{
+	StandaloneSupplicant::instance()->wpa_supplicant_ctrl_iface_deinit(priv);
+	delete priv;
+}
+
+void
+wpa_supplicant_ctrl_iface_wait(struct ctrl_iface_priv *priv)
+{
+	StandaloneSupplicant::instance()->wpa_supplicant_ctrl_iface_wait(priv);
+}
+
+struct ctrl_iface_global_priv *
+wpa_supplicant_global_ctrl_iface_init(struct wpa_global *global)
+{
+	ctrl_iface_global_priv *priv = new ctrl_iface_global_priv;
+	priv->global = global;
+	StandaloneSupplicant::instance()->wpa_supplicant_global_ctrl_iface_init(priv);
+	return priv;
+}
+
+void
+wpa_supplicant_global_ctrl_iface_deinit(struct ctrl_iface_global_priv *priv)
+{
+	StandaloneSupplicant::instance()->wpa_supplicant_global_ctrl_iface_deinit(priv);
+	delete priv;
+}
+
+
+struct wpa_ctrl * wpa_ctrl_open(const char *ctrl_path)
+{
+	if (ctrl_path && ctrl_path[0] == '\0') {
+		StandaloneSupplicant::instance();
+		return NULL;
+	}
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	if (!s->isRunning())
+		return NULL;
+	struct wpa_ctrl *ctrl = new wpa_ctrl;
+	ctrl->ctrl_path = ctrl_path;
+	s->wpa_ctrl_open(ctrl);
+	return ctrl;
+}
+
+void wpa_ctrl_close(struct wpa_ctrl *ctrl)
+{
+	StandaloneSupplicant::instance()->wpa_ctrl_close(ctrl);
+	delete ctrl;
+}
+
+int wpa_ctrl_request(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,
+		     char *reply, size_t *reply_len,
+		     void (*msg_cb)(char *msg, size_t len))
+{
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	if (!s->isRunning())
+		return -1;
+	return s->wpa_ctrl_request(ctrl, cmd, cmd_len, reply, reply_len);
+}
+
+int wpa_ctrl_attach(struct wpa_ctrl *ctrl)
+{
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	if (!s->isRunning())
+		return -1;
+	return s->StandaloneSupplicant::instance()->wpa_ctrl_attach(ctrl);
+}
+
+int wpa_ctrl_detach(struct wpa_ctrl *ctrl)
+{
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	if (!s->isRunning())
+		return -1;
+	return s->StandaloneSupplicant::instance()->wpa_ctrl_detach(ctrl);
+}
+
+int wpa_ctrl_recv(struct wpa_ctrl *ctrl, char *reply, size_t *reply_len)
+{
+	return -1;
+}
+
+int wpa_ctrl_pending(struct wpa_ctrl *ctrl)
+{
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	if (!s->isRunning())
+		return -1;
+	return 0;
+}
+
+int wpa_ctrl_get_fd(struct wpa_ctrl *ctrl)
+{
+	return -1;
+}
+
+int wpa_supplicant_run_call(struct wpa_global *global)
+{
+	StandaloneSupplicant *s = StandaloneSupplicant::instance();
+	return s->wpa_supplicant_run_call(global);
+}
+
+}
diff --git a/wpa_supplicant/wpa_gui-qt4/standalone.h b/wpa_supplicant/wpa_gui-qt4/standalone.h
new file mode 100644
index 0000000..1b10b24
--- /dev/null
+++ b/wpa_supplicant/wpa_gui-qt4/standalone.h
@@ -0,0 +1,60 @@
+#ifndef STANDALONE_H
+#define STANDALONE_H
+
+#include <cstring>
+
+#include <QList>
+#include <QReadWriteLock>
+#include <QThread>
+
+struct wpa_supplicant;
+struct wpa_global;
+
+struct ctrl_iface_priv;
+struct ctrl_iface_global_priv;
+struct wpa_ctrl;
+
+class StandaloneSupplicant : public QThread
+{
+private:
+	StandaloneSupplicant(QObject *parent = NULL);
+	~StandaloneSupplicant();
+
+	wpa_supplicant *get_supplicant(const wpa_ctrl *ctrl);
+
+public:
+	static StandaloneSupplicant *instance();
+
+	// service
+	int wpa_supplicant_run_call(struct wpa_global *global);
+
+	// supplicant
+	void wpa_supplicant_ctrl_iface_init(ctrl_iface_priv *priv);
+	void wpa_supplicant_ctrl_iface_deinit(ctrl_iface_priv *priv);
+	void wpa_supplicant_ctrl_iface_wait(ctrl_iface_priv *priv);
+	void wpa_supplicant_global_ctrl_iface_init(ctrl_iface_global_priv *priv);
+	void wpa_supplicant_global_ctrl_iface_deinit(ctrl_iface_global_priv *priv);
+
+	// gui
+	void wpa_ctrl_open(wpa_ctrl *ctrl);
+	void wpa_ctrl_close(wpa_ctrl *ctrl);
+	int wpa_ctrl_request(wpa_ctrl *ctrl, const char *cmd, size_t cmd_len, char *reply, size_t *reply_len);
+	int wpa_ctrl_attach(wpa_ctrl *ctrl);
+	int wpa_ctrl_detach(wpa_ctrl *ctrl);
+
+public:
+	void stop();
+
+protected:
+	void run();
+	void reset();
+
+private:
+	QReadWriteLock m_ctrl_ifaces_lock;
+	QList<ctrl_iface_priv*> m_ctrl_ifaces;
+	QReadWriteLock m_global_lock;
+	ctrl_iface_global_priv *m_global;
+	bool m_supplicant_running;
+};
+
+#endif /* STANDALONE_H */
diff --git a/wpa_supplicant/wpa_gui-qt4/wpagui.cpp b/wpa_supplicant/wpa_gui-qt4/wpagui.cpp
index ef2a947..c5aac33 100644
--- a/wpa_supplicant/wpa_gui-qt4/wpagui.cpp
+++ b/wpa_supplicant/wpa_gui-qt4/wpagui.cpp
@@ -28,6 +28,9 @@
 #include "common/wpa_ctrl.h"
 #include "userdatarequest.h"
 #include "networkconfig.h"
+#ifdef CONFIG_CTRL_IFACE_STANDALONE
+#include "standalone.h"
+#endif
 
 
 #if defined(_MSC_VER) && (_MSC_VER < 1900)
@@ -196,6 +199,11 @@ WpaGui::WpaGui(QApplication *_app, QWidget *parent, const char *,
 	else
 		show();
 
+#ifdef CONFIG_CTRL_IFACE_STANDALONE
+	if (!serviceRunning())
+		WpaGui::startService();
+#endif
+
 	connectedToService = false;
 	textStatus->setText(tr("connecting to wpa_supplicant"));
 	timer = new QTimer(this);
@@ -267,6 +275,11 @@ WpaGui::~WpaGui()
 
 	free(ctrl_iface_dir);
 	ctrl_iface_dir = NULL;
+
+#ifdef CONFIG_CTRL_IFACE_STANDALONE
+	if (serviceRunning())
+		WpaGui::stopService();
+#endif
 }
 
 
@@ -1880,6 +1893,7 @@ void ErrorMsg::showMsg(QString msg)
 
 void WpaGui::startService()
 {
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
 	SC_HANDLE svc, scm;
 
 	scm = OpenSCManager(0, 0, SC_MANAGER_CONNECT);
@@ -1902,11 +1916,15 @@ void WpaGui::startService()
 
 	CloseServiceHandle(svc);
 	CloseServiceHandle(scm);
+#else
+	StandaloneSupplicant::instance()->start();
+#endif
 }
 
 
 void WpaGui::stopService()
 {
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
 	SC_HANDLE svc, scm;
 	SERVICE_STATUS status;
 
@@ -1930,11 +1948,15 @@ void WpaGui::stopService()
 
 	CloseServiceHandle(svc);
 	CloseServiceHandle(scm);
+#else
+	StandaloneSupplicant::instance()->stop();
+#endif
 }
 
 
 bool WpaGui::serviceRunning()
 {
+#ifndef CONFIG_CTRL_IFACE_STANDALONE
 	SC_HANDLE svc, scm;
 	SERVICE_STATUS status;
 	bool running = false;
@@ -1961,6 +1983,9 @@ bool WpaGui::serviceRunning()
 	CloseServiceHandle(scm);
 
 	return running;
+#else
+	return StandaloneSupplicant::instance()->isRunning();
+#endif
 }
 
 void WpaGui::addToStartup()
-- 
2.30.2

